// Autogenerated from Pigeon (v0.1.22), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package pub.vmess.libv2ray;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.StandardMessageCodec;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Message {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartRequest {
    private String config;
    public String getConfig() { return config; }
    public void setConfig(String setterArg) { this.config = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("config", config);
      return toMapResult;
    }
    static StartRequest fromMap(Map<String, Object> map) {
      StartRequest fromMapResult = new StartRequest();
      Object config = map.get("config");
      fromMapResult.config = (String)config;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StatusReply {
    private Long status;
    public Long getStatus() { return status; }
    public void setStatus(Long setterArg) { this.status = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("status", status);
      return toMapResult;
    }
    static StatusReply fromMap(Map<String, Object> map) {
      StatusReply fromMapResult = new StatusReply();
      Object status = map.get("status");
      fromMapResult.status = (status == null) ? null : ((status instanceof Integer) ? (Integer)status : (Long)status);
      return fromMapResult;
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface V2rayApi {
    void start(StartRequest arg);
    void stop();
    StatusReply status();

    /** Sets up an instance of `V2rayApi` to handle messages through the `binaryMessenger` */
    static void setup(BinaryMessenger binaryMessenger, V2rayApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.V2rayApi.start", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              @SuppressWarnings("ConstantConditions")
              StartRequest input = StartRequest.fromMap((Map<String, Object>)message);
              api.start(input);
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.V2rayApi.stop", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.stop();
              wrapped.put("result", null);
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.V2rayApi.status", new StandardMessageCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              StatusReply output = api.status();
              wrapped.put("result", output.toMap());
            }
            catch (Exception exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Exception exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
